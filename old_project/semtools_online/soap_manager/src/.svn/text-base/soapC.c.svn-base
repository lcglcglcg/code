/* soapC.c
   Generated by gSOAP 2.8.14 from demo.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

#ifdef __cplusplus
extern "C" {
#endif

SOAP_SOURCE_STAMP("@(#) soapC.c ver 2.8.14 2013-07-19 09:54:08 GMT")
SOAP_NMAC struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "http://ws.semtools.ufstone.com/", NULL, NULL},
	{"ns1", "http://impl.ws.semtools.ufstone.com/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = (struct SOAP_ENV__Header*)soap_malloc(soap, sizeof(struct SOAP_ENV__Header))))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = (struct SOAP_ENV__Reason*)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason));
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_ns2__updateLoginPasswordResponse:
		return soap_in_ns2__updateLoginPasswordResponse(soap, NULL, NULL, "ns2:updateLoginPasswordResponse");
	case SOAP_TYPE_ns2__updateLoginPassword:
		return soap_in_ns2__updateLoginPassword(soap, NULL, NULL, "ns2:updateLoginPassword");
	case SOAP_TYPE_ns2__updateAccountResponse:
		return soap_in_ns2__updateAccountResponse(soap, NULL, NULL, "ns2:updateAccountResponse");
	case SOAP_TYPE_ns2__updateAccount:
		return soap_in_ns2__updateAccount(soap, NULL, NULL, "ns2:updateAccount");
	case SOAP_TYPE_ns2__OperateType:
		return soap_in_ns2__OperateType(soap, NULL, NULL, "ns2:OperateType");
	case SOAP_TYPE_ns2__addAccountResponse:
		return soap_in_ns2__addAccountResponse(soap, NULL, NULL, "ns2:addAccountResponse");
	case SOAP_TYPE_ns2__addAccount:
		return soap_in_ns2__addAccount(soap, NULL, NULL, "ns2:addAccount");
	case SOAP_TYPE_ns2__queryAccountResponse:
		return soap_in_ns2__queryAccountResponse(soap, NULL, NULL, "ns2:queryAccountResponse");
	case SOAP_TYPE_ns2__queryAccount:
		return soap_in_ns2__queryAccount(soap, NULL, NULL, "ns2:queryAccount");
	case SOAP_TYPE_ns2__deleteAccountResponse:
		return soap_in_ns2__deleteAccountResponse(soap, NULL, NULL, "ns2:deleteAccountResponse");
	case SOAP_TYPE_ns2__deleteAccount:
		return soap_in_ns2__deleteAccount(soap, NULL, NULL, "ns2:deleteAccount");
	case SOAP_TYPE_ns2__AccountItemType:
		return soap_in_ns2__AccountItemType(soap, NULL, NULL, "ns2:AccountItemType");
	case SOAP_TYPE_ns2__queryAllAccountResponse:
		return soap_in_ns2__queryAllAccountResponse(soap, NULL, NULL, "ns2:queryAllAccountResponse");
	case SOAP_TYPE_ns2__queryAllAccount:
		return soap_in_ns2__queryAllAccount(soap, NULL, NULL, "ns2:queryAllAccount");
	case SOAP_TYPE_ns2__CompanyType:
		return soap_in_ns2__CompanyType(soap, NULL, NULL, "ns2:CompanyType");
	case SOAP_TYPE_ns2__authLoginResponse:
		return soap_in_ns2__authLoginResponse(soap, NULL, NULL, "ns2:authLoginResponse");
	case SOAP_TYPE_ns2__authLogin:
		return soap_in_ns2__authLogin(soap, NULL, NULL, "ns2:authLogin");
	case SOAP_TYPE_ns2__Exception:
		return soap_in_ns2__Exception(soap, NULL, NULL, "ns2:Exception");
	case SOAP_TYPE_ns2__BaiduAccountInfo:
		return soap_in_ns2__BaiduAccountInfo(soap, NULL, NULL, "ns2:BaiduAccountInfo");
	case SOAP_TYPE_ns2__commonResult:
		return soap_in_ns2__commonResult(soap, NULL, NULL, "ns2:commonResult");
	case SOAP_TYPE_PointerTons2__updateLoginPasswordResponse:
		return soap_in_PointerTons2__updateLoginPasswordResponse(soap, NULL, NULL, "ns2:updateLoginPasswordResponse");
	case SOAP_TYPE_PointerTons2__updateLoginPassword:
		return soap_in_PointerTons2__updateLoginPassword(soap, NULL, NULL, "ns2:updateLoginPassword");
	case SOAP_TYPE_PointerTons2__updateAccountResponse:
		return soap_in_PointerTons2__updateAccountResponse(soap, NULL, NULL, "ns2:updateAccountResponse");
	case SOAP_TYPE_PointerTons2__updateAccount:
		return soap_in_PointerTons2__updateAccount(soap, NULL, NULL, "ns2:updateAccount");
	case SOAP_TYPE_PointerTons2__queryAccountResponse:
		return soap_in_PointerTons2__queryAccountResponse(soap, NULL, NULL, "ns2:queryAccountResponse");
	case SOAP_TYPE_PointerTons2__queryAccount:
		return soap_in_PointerTons2__queryAccount(soap, NULL, NULL, "ns2:queryAccount");
	case SOAP_TYPE_PointerTons2__addAccountResponse:
		return soap_in_PointerTons2__addAccountResponse(soap, NULL, NULL, "ns2:addAccountResponse");
	case SOAP_TYPE_PointerTons2__addAccount:
		return soap_in_PointerTons2__addAccount(soap, NULL, NULL, "ns2:addAccount");
	case SOAP_TYPE_PointerTons2__deleteAccountResponse:
		return soap_in_PointerTons2__deleteAccountResponse(soap, NULL, NULL, "ns2:deleteAccountResponse");
	case SOAP_TYPE_PointerTons2__deleteAccount:
		return soap_in_PointerTons2__deleteAccount(soap, NULL, NULL, "ns2:deleteAccount");
	case SOAP_TYPE_PointerTons2__queryAllAccountResponse:
		return soap_in_PointerTons2__queryAllAccountResponse(soap, NULL, NULL, "ns2:queryAllAccountResponse");
	case SOAP_TYPE_PointerTons2__queryAllAccount:
		return soap_in_PointerTons2__queryAllAccount(soap, NULL, NULL, "ns2:queryAllAccount");
	case SOAP_TYPE_PointerTons2__authLoginResponse:
		return soap_in_PointerTons2__authLoginResponse(soap, NULL, NULL, "ns2:authLoginResponse");
	case SOAP_TYPE_PointerTons2__authLogin:
		return soap_in_PointerTons2__authLogin(soap, NULL, NULL, "ns2:authLogin");
	case SOAP_TYPE_PointerTons2__Exception:
		return soap_in_PointerTons2__Exception(soap, NULL, NULL, "ns2:Exception");
	case SOAP_TYPE_PointerTons2__OperateType:
		return soap_in_PointerTons2__OperateType(soap, NULL, NULL, "ns2:OperateType");
	case SOAP_TYPE_PointerTons2__BaiduAccountInfo:
		return soap_in_PointerTons2__BaiduAccountInfo(soap, NULL, NULL, "ns2:BaiduAccountInfo");
	case SOAP_TYPE_PointerTons2__AccountItemType:
		return soap_in_PointerTons2__AccountItemType(soap, NULL, NULL, "ns2:AccountItemType");
	case SOAP_TYPE_PointerTons2__CompanyType:
		return soap_in_PointerTons2__CompanyType(soap, NULL, NULL, "ns2:CompanyType");
	case SOAP_TYPE_PointerToLONG64:
		return soap_in_PointerToLONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:updateLoginPasswordResponse"))
		{	*type = SOAP_TYPE_ns2__updateLoginPasswordResponse;
			return soap_in_ns2__updateLoginPasswordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:updateLoginPassword"))
		{	*type = SOAP_TYPE_ns2__updateLoginPassword;
			return soap_in_ns2__updateLoginPassword(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:updateAccountResponse"))
		{	*type = SOAP_TYPE_ns2__updateAccountResponse;
			return soap_in_ns2__updateAccountResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:updateAccount"))
		{	*type = SOAP_TYPE_ns2__updateAccount;
			return soap_in_ns2__updateAccount(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:OperateType"))
		{	*type = SOAP_TYPE_ns2__OperateType;
			return soap_in_ns2__OperateType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:addAccountResponse"))
		{	*type = SOAP_TYPE_ns2__addAccountResponse;
			return soap_in_ns2__addAccountResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:addAccount"))
		{	*type = SOAP_TYPE_ns2__addAccount;
			return soap_in_ns2__addAccount(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:queryAccountResponse"))
		{	*type = SOAP_TYPE_ns2__queryAccountResponse;
			return soap_in_ns2__queryAccountResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:queryAccount"))
		{	*type = SOAP_TYPE_ns2__queryAccount;
			return soap_in_ns2__queryAccount(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:deleteAccountResponse"))
		{	*type = SOAP_TYPE_ns2__deleteAccountResponse;
			return soap_in_ns2__deleteAccountResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:deleteAccount"))
		{	*type = SOAP_TYPE_ns2__deleteAccount;
			return soap_in_ns2__deleteAccount(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:AccountItemType"))
		{	*type = SOAP_TYPE_ns2__AccountItemType;
			return soap_in_ns2__AccountItemType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:queryAllAccountResponse"))
		{	*type = SOAP_TYPE_ns2__queryAllAccountResponse;
			return soap_in_ns2__queryAllAccountResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:queryAllAccount"))
		{	*type = SOAP_TYPE_ns2__queryAllAccount;
			return soap_in_ns2__queryAllAccount(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:CompanyType"))
		{	*type = SOAP_TYPE_ns2__CompanyType;
			return soap_in_ns2__CompanyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:authLoginResponse"))
		{	*type = SOAP_TYPE_ns2__authLoginResponse;
			return soap_in_ns2__authLoginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:authLogin"))
		{	*type = SOAP_TYPE_ns2__authLogin;
			return soap_in_ns2__authLogin(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Exception"))
		{	*type = SOAP_TYPE_ns2__Exception;
			return soap_in_ns2__Exception(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:BaiduAccountInfo"))
		{	*type = SOAP_TYPE_ns2__BaiduAccountInfo;
			return soap_in_ns2__BaiduAccountInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:commonResult"))
		{	*type = SOAP_TYPE_ns2__commonResult;
			return soap_in_ns2__commonResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_ns2__updateLoginPasswordResponse:
		return soap_out_ns2__updateLoginPasswordResponse(soap, tag, id, (const struct ns2__updateLoginPasswordResponse *)ptr, "ns2:updateLoginPasswordResponse");
	case SOAP_TYPE_ns2__updateLoginPassword:
		return soap_out_ns2__updateLoginPassword(soap, tag, id, (const struct ns2__updateLoginPassword *)ptr, "ns2:updateLoginPassword");
	case SOAP_TYPE_ns2__updateAccountResponse:
		return soap_out_ns2__updateAccountResponse(soap, tag, id, (const struct ns2__updateAccountResponse *)ptr, "ns2:updateAccountResponse");
	case SOAP_TYPE_ns2__updateAccount:
		return soap_out_ns2__updateAccount(soap, tag, id, (const struct ns2__updateAccount *)ptr, "ns2:updateAccount");
	case SOAP_TYPE_ns2__OperateType:
		return soap_out_ns2__OperateType(soap, tag, id, (const struct ns2__OperateType *)ptr, "ns2:OperateType");
	case SOAP_TYPE_ns2__addAccountResponse:
		return soap_out_ns2__addAccountResponse(soap, tag, id, (const struct ns2__addAccountResponse *)ptr, "ns2:addAccountResponse");
	case SOAP_TYPE_ns2__addAccount:
		return soap_out_ns2__addAccount(soap, tag, id, (const struct ns2__addAccount *)ptr, "ns2:addAccount");
	case SOAP_TYPE_ns2__queryAccountResponse:
		return soap_out_ns2__queryAccountResponse(soap, tag, id, (const struct ns2__queryAccountResponse *)ptr, "ns2:queryAccountResponse");
	case SOAP_TYPE_ns2__queryAccount:
		return soap_out_ns2__queryAccount(soap, tag, id, (const struct ns2__queryAccount *)ptr, "ns2:queryAccount");
	case SOAP_TYPE_ns2__deleteAccountResponse:
		return soap_out_ns2__deleteAccountResponse(soap, tag, id, (const struct ns2__deleteAccountResponse *)ptr, "ns2:deleteAccountResponse");
	case SOAP_TYPE_ns2__deleteAccount:
		return soap_out_ns2__deleteAccount(soap, tag, id, (const struct ns2__deleteAccount *)ptr, "ns2:deleteAccount");
	case SOAP_TYPE_ns2__AccountItemType:
		return soap_out_ns2__AccountItemType(soap, tag, id, (const struct ns2__AccountItemType *)ptr, "ns2:AccountItemType");
	case SOAP_TYPE_ns2__queryAllAccountResponse:
		return soap_out_ns2__queryAllAccountResponse(soap, tag, id, (const struct ns2__queryAllAccountResponse *)ptr, "ns2:queryAllAccountResponse");
	case SOAP_TYPE_ns2__queryAllAccount:
		return soap_out_ns2__queryAllAccount(soap, tag, id, (const struct ns2__queryAllAccount *)ptr, "ns2:queryAllAccount");
	case SOAP_TYPE_ns2__CompanyType:
		return soap_out_ns2__CompanyType(soap, tag, id, (const struct ns2__CompanyType *)ptr, "ns2:CompanyType");
	case SOAP_TYPE_ns2__authLoginResponse:
		return soap_out_ns2__authLoginResponse(soap, tag, id, (const struct ns2__authLoginResponse *)ptr, "ns2:authLoginResponse");
	case SOAP_TYPE_ns2__authLogin:
		return soap_out_ns2__authLogin(soap, tag, id, (const struct ns2__authLogin *)ptr, "ns2:authLogin");
	case SOAP_TYPE_ns2__Exception:
		return soap_out_ns2__Exception(soap, tag, id, (const struct ns2__Exception *)ptr, "ns2:Exception");
	case SOAP_TYPE_ns2__BaiduAccountInfo:
		return soap_out_ns2__BaiduAccountInfo(soap, tag, id, (const struct ns2__BaiduAccountInfo *)ptr, "ns2:BaiduAccountInfo");
	case SOAP_TYPE_ns2__commonResult:
		return soap_out_ns2__commonResult(soap, tag, id, (const struct ns2__commonResult *)ptr, "ns2:commonResult");
	case SOAP_TYPE_PointerTons2__updateLoginPasswordResponse:
		return soap_out_PointerTons2__updateLoginPasswordResponse(soap, tag, id, (struct ns2__updateLoginPasswordResponse *const*)ptr, "ns2:updateLoginPasswordResponse");
	case SOAP_TYPE_PointerTons2__updateLoginPassword:
		return soap_out_PointerTons2__updateLoginPassword(soap, tag, id, (struct ns2__updateLoginPassword *const*)ptr, "ns2:updateLoginPassword");
	case SOAP_TYPE_PointerTons2__updateAccountResponse:
		return soap_out_PointerTons2__updateAccountResponse(soap, tag, id, (struct ns2__updateAccountResponse *const*)ptr, "ns2:updateAccountResponse");
	case SOAP_TYPE_PointerTons2__updateAccount:
		return soap_out_PointerTons2__updateAccount(soap, tag, id, (struct ns2__updateAccount *const*)ptr, "ns2:updateAccount");
	case SOAP_TYPE_PointerTons2__queryAccountResponse:
		return soap_out_PointerTons2__queryAccountResponse(soap, tag, id, (struct ns2__queryAccountResponse *const*)ptr, "ns2:queryAccountResponse");
	case SOAP_TYPE_PointerTons2__queryAccount:
		return soap_out_PointerTons2__queryAccount(soap, tag, id, (struct ns2__queryAccount *const*)ptr, "ns2:queryAccount");
	case SOAP_TYPE_PointerTons2__addAccountResponse:
		return soap_out_PointerTons2__addAccountResponse(soap, tag, id, (struct ns2__addAccountResponse *const*)ptr, "ns2:addAccountResponse");
	case SOAP_TYPE_PointerTons2__addAccount:
		return soap_out_PointerTons2__addAccount(soap, tag, id, (struct ns2__addAccount *const*)ptr, "ns2:addAccount");
	case SOAP_TYPE_PointerTons2__deleteAccountResponse:
		return soap_out_PointerTons2__deleteAccountResponse(soap, tag, id, (struct ns2__deleteAccountResponse *const*)ptr, "ns2:deleteAccountResponse");
	case SOAP_TYPE_PointerTons2__deleteAccount:
		return soap_out_PointerTons2__deleteAccount(soap, tag, id, (struct ns2__deleteAccount *const*)ptr, "ns2:deleteAccount");
	case SOAP_TYPE_PointerTons2__queryAllAccountResponse:
		return soap_out_PointerTons2__queryAllAccountResponse(soap, tag, id, (struct ns2__queryAllAccountResponse *const*)ptr, "ns2:queryAllAccountResponse");
	case SOAP_TYPE_PointerTons2__queryAllAccount:
		return soap_out_PointerTons2__queryAllAccount(soap, tag, id, (struct ns2__queryAllAccount *const*)ptr, "ns2:queryAllAccount");
	case SOAP_TYPE_PointerTons2__authLoginResponse:
		return soap_out_PointerTons2__authLoginResponse(soap, tag, id, (struct ns2__authLoginResponse *const*)ptr, "ns2:authLoginResponse");
	case SOAP_TYPE_PointerTons2__authLogin:
		return soap_out_PointerTons2__authLogin(soap, tag, id, (struct ns2__authLogin *const*)ptr, "ns2:authLogin");
	case SOAP_TYPE_PointerTons2__Exception:
		return soap_out_PointerTons2__Exception(soap, tag, id, (struct ns2__Exception *const*)ptr, "ns2:Exception");
	case SOAP_TYPE_PointerTons2__OperateType:
		return soap_out_PointerTons2__OperateType(soap, tag, id, (struct ns2__OperateType *const*)ptr, "ns2:OperateType");
	case SOAP_TYPE_PointerTons2__BaiduAccountInfo:
		return soap_out_PointerTons2__BaiduAccountInfo(soap, tag, id, (struct ns2__BaiduAccountInfo *const*)ptr, "ns2:BaiduAccountInfo");
	case SOAP_TYPE_PointerTons2__AccountItemType:
		return soap_out_PointerTons2__AccountItemType(soap, tag, id, (struct ns2__AccountItemType *const*)ptr, "ns2:AccountItemType");
	case SOAP_TYPE_PointerTons2__CompanyType:
		return soap_out_PointerTons2__CompanyType(soap, tag, id, (struct ns2__CompanyType *const*)ptr, "ns2:CompanyType");
	case SOAP_TYPE_PointerToLONG64:
		return soap_out_PointerToLONG64(soap, tag, id, (LONG64 *const*)ptr, "xsd:long");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE___ns1__updateLoginPassword:
		soap_serialize___ns1__updateLoginPassword(soap, (const struct __ns1__updateLoginPassword *)ptr);
		break;
	case SOAP_TYPE___ns1__updateAccount:
		soap_serialize___ns1__updateAccount(soap, (const struct __ns1__updateAccount *)ptr);
		break;
	case SOAP_TYPE___ns1__queryAccount:
		soap_serialize___ns1__queryAccount(soap, (const struct __ns1__queryAccount *)ptr);
		break;
	case SOAP_TYPE___ns1__addAccount:
		soap_serialize___ns1__addAccount(soap, (const struct __ns1__addAccount *)ptr);
		break;
	case SOAP_TYPE___ns1__deleteAccount:
		soap_serialize___ns1__deleteAccount(soap, (const struct __ns1__deleteAccount *)ptr);
		break;
	case SOAP_TYPE___ns1__queryAllAccount:
		soap_serialize___ns1__queryAllAccount(soap, (const struct __ns1__queryAllAccount *)ptr);
		break;
	case SOAP_TYPE___ns1__authLogin:
		soap_serialize___ns1__authLogin(soap, (const struct __ns1__authLogin *)ptr);
		break;
	case SOAP_TYPE_ns2__updateLoginPasswordResponse:
		soap_serialize_ns2__updateLoginPasswordResponse(soap, (const struct ns2__updateLoginPasswordResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__updateLoginPassword:
		soap_serialize_ns2__updateLoginPassword(soap, (const struct ns2__updateLoginPassword *)ptr);
		break;
	case SOAP_TYPE_ns2__updateAccountResponse:
		soap_serialize_ns2__updateAccountResponse(soap, (const struct ns2__updateAccountResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__updateAccount:
		soap_serialize_ns2__updateAccount(soap, (const struct ns2__updateAccount *)ptr);
		break;
	case SOAP_TYPE_ns2__OperateType:
		soap_serialize_ns2__OperateType(soap, (const struct ns2__OperateType *)ptr);
		break;
	case SOAP_TYPE_ns2__addAccountResponse:
		soap_serialize_ns2__addAccountResponse(soap, (const struct ns2__addAccountResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__addAccount:
		soap_serialize_ns2__addAccount(soap, (const struct ns2__addAccount *)ptr);
		break;
	case SOAP_TYPE_ns2__queryAccountResponse:
		soap_serialize_ns2__queryAccountResponse(soap, (const struct ns2__queryAccountResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__queryAccount:
		soap_serialize_ns2__queryAccount(soap, (const struct ns2__queryAccount *)ptr);
		break;
	case SOAP_TYPE_ns2__deleteAccountResponse:
		soap_serialize_ns2__deleteAccountResponse(soap, (const struct ns2__deleteAccountResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__deleteAccount:
		soap_serialize_ns2__deleteAccount(soap, (const struct ns2__deleteAccount *)ptr);
		break;
	case SOAP_TYPE_ns2__AccountItemType:
		soap_serialize_ns2__AccountItemType(soap, (const struct ns2__AccountItemType *)ptr);
		break;
	case SOAP_TYPE_ns2__queryAllAccountResponse:
		soap_serialize_ns2__queryAllAccountResponse(soap, (const struct ns2__queryAllAccountResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__queryAllAccount:
		soap_serialize_ns2__queryAllAccount(soap, (const struct ns2__queryAllAccount *)ptr);
		break;
	case SOAP_TYPE_ns2__CompanyType:
		soap_serialize_ns2__CompanyType(soap, (const struct ns2__CompanyType *)ptr);
		break;
	case SOAP_TYPE_ns2__authLoginResponse:
		soap_serialize_ns2__authLoginResponse(soap, (const struct ns2__authLoginResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__authLogin:
		soap_serialize_ns2__authLogin(soap, (const struct ns2__authLogin *)ptr);
		break;
	case SOAP_TYPE_ns2__Exception:
		soap_serialize_ns2__Exception(soap, (const struct ns2__Exception *)ptr);
		break;
	case SOAP_TYPE_ns2__BaiduAccountInfo:
		soap_serialize_ns2__BaiduAccountInfo(soap, (const struct ns2__BaiduAccountInfo *)ptr);
		break;
	case SOAP_TYPE_ns2__commonResult:
		soap_serialize_ns2__commonResult(soap, (const struct ns2__commonResult *)ptr);
		break;
	case SOAP_TYPE_PointerTons2__updateLoginPasswordResponse:
		soap_serialize_PointerTons2__updateLoginPasswordResponse(soap, (struct ns2__updateLoginPasswordResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__updateLoginPassword:
		soap_serialize_PointerTons2__updateLoginPassword(soap, (struct ns2__updateLoginPassword *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__updateAccountResponse:
		soap_serialize_PointerTons2__updateAccountResponse(soap, (struct ns2__updateAccountResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__updateAccount:
		soap_serialize_PointerTons2__updateAccount(soap, (struct ns2__updateAccount *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__queryAccountResponse:
		soap_serialize_PointerTons2__queryAccountResponse(soap, (struct ns2__queryAccountResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__queryAccount:
		soap_serialize_PointerTons2__queryAccount(soap, (struct ns2__queryAccount *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__addAccountResponse:
		soap_serialize_PointerTons2__addAccountResponse(soap, (struct ns2__addAccountResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__addAccount:
		soap_serialize_PointerTons2__addAccount(soap, (struct ns2__addAccount *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__deleteAccountResponse:
		soap_serialize_PointerTons2__deleteAccountResponse(soap, (struct ns2__deleteAccountResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__deleteAccount:
		soap_serialize_PointerTons2__deleteAccount(soap, (struct ns2__deleteAccount *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__queryAllAccountResponse:
		soap_serialize_PointerTons2__queryAllAccountResponse(soap, (struct ns2__queryAllAccountResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__queryAllAccount:
		soap_serialize_PointerTons2__queryAllAccount(soap, (struct ns2__queryAllAccount *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__authLoginResponse:
		soap_serialize_PointerTons2__authLoginResponse(soap, (struct ns2__authLoginResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__authLogin:
		soap_serialize_PointerTons2__authLogin(soap, (struct ns2__authLogin *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__Exception:
		soap_serialize_PointerTons2__Exception(soap, (struct ns2__Exception *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__OperateType:
		soap_serialize_PointerTons2__OperateType(soap, (struct ns2__OperateType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__BaiduAccountInfo:
		soap_serialize_PointerTons2__BaiduAccountInfo(soap, (struct ns2__BaiduAccountInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__AccountItemType:
		soap_serialize_PointerTons2__AccountItemType(soap, (struct ns2__AccountItemType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__CompanyType:
		soap_serialize_PointerTons2__CompanyType(soap, (struct ns2__CompanyType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToLONG64:
		soap_serialize_PointerToLONG64(soap, (LONG64 *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__updateLoginPassword(struct soap *soap, struct __ns1__updateLoginPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__updateLoginPassword = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__updateLoginPassword(struct soap *soap, const struct __ns1__updateLoginPassword *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__updateLoginPassword(soap, &a->ns2__updateLoginPassword);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__updateLoginPassword(struct soap *soap, const char *tag, int id, const struct __ns1__updateLoginPassword *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons2__updateLoginPassword(soap, "ns2:updateLoginPassword", -1, &a->ns2__updateLoginPassword, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__updateLoginPassword * SOAP_FMAC4 soap_in___ns1__updateLoginPassword(struct soap *soap, const char *tag, struct __ns1__updateLoginPassword *a, const char *type)
{
	size_t soap_flag_ns2__updateLoginPassword = 1;
	short soap_flag;
	a = (struct __ns1__updateLoginPassword *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__updateLoginPassword, sizeof(struct __ns1__updateLoginPassword), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__updateLoginPassword(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__updateLoginPassword && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__updateLoginPassword(soap, "ns2:updateLoginPassword", &a->ns2__updateLoginPassword, "ns2:updateLoginPassword"))
				{	soap_flag_ns2__updateLoginPassword--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__updateLoginPassword(struct soap *soap, const struct __ns1__updateLoginPassword *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__updateLoginPassword(soap, tag?tag:"-ns1:updateLoginPassword", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__updateLoginPassword * SOAP_FMAC4 soap_get___ns1__updateLoginPassword(struct soap *soap, struct __ns1__updateLoginPassword *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__updateLoginPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__updateAccount(struct soap *soap, struct __ns1__updateAccount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__updateAccount = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__updateAccount(struct soap *soap, const struct __ns1__updateAccount *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__updateAccount(soap, &a->ns2__updateAccount);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__updateAccount(struct soap *soap, const char *tag, int id, const struct __ns1__updateAccount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons2__updateAccount(soap, "ns2:updateAccount", -1, &a->ns2__updateAccount, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__updateAccount * SOAP_FMAC4 soap_in___ns1__updateAccount(struct soap *soap, const char *tag, struct __ns1__updateAccount *a, const char *type)
{
	size_t soap_flag_ns2__updateAccount = 1;
	short soap_flag;
	a = (struct __ns1__updateAccount *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__updateAccount, sizeof(struct __ns1__updateAccount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__updateAccount(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__updateAccount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__updateAccount(soap, "ns2:updateAccount", &a->ns2__updateAccount, "ns2:updateAccount"))
				{	soap_flag_ns2__updateAccount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__updateAccount(struct soap *soap, const struct __ns1__updateAccount *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__updateAccount(soap, tag?tag:"-ns1:updateAccount", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__updateAccount * SOAP_FMAC4 soap_get___ns1__updateAccount(struct soap *soap, struct __ns1__updateAccount *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__updateAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__queryAccount(struct soap *soap, struct __ns1__queryAccount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__queryAccount = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__queryAccount(struct soap *soap, const struct __ns1__queryAccount *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__queryAccount(soap, &a->ns2__queryAccount);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__queryAccount(struct soap *soap, const char *tag, int id, const struct __ns1__queryAccount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons2__queryAccount(soap, "ns2:queryAccount", -1, &a->ns2__queryAccount, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__queryAccount * SOAP_FMAC4 soap_in___ns1__queryAccount(struct soap *soap, const char *tag, struct __ns1__queryAccount *a, const char *type)
{
	size_t soap_flag_ns2__queryAccount = 1;
	short soap_flag;
	a = (struct __ns1__queryAccount *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__queryAccount, sizeof(struct __ns1__queryAccount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__queryAccount(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__queryAccount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__queryAccount(soap, "ns2:queryAccount", &a->ns2__queryAccount, "ns2:queryAccount"))
				{	soap_flag_ns2__queryAccount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__queryAccount(struct soap *soap, const struct __ns1__queryAccount *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__queryAccount(soap, tag?tag:"-ns1:queryAccount", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__queryAccount * SOAP_FMAC4 soap_get___ns1__queryAccount(struct soap *soap, struct __ns1__queryAccount *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__queryAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__addAccount(struct soap *soap, struct __ns1__addAccount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__addAccount = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__addAccount(struct soap *soap, const struct __ns1__addAccount *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__addAccount(soap, &a->ns2__addAccount);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__addAccount(struct soap *soap, const char *tag, int id, const struct __ns1__addAccount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons2__addAccount(soap, "ns2:addAccount", -1, &a->ns2__addAccount, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__addAccount * SOAP_FMAC4 soap_in___ns1__addAccount(struct soap *soap, const char *tag, struct __ns1__addAccount *a, const char *type)
{
	size_t soap_flag_ns2__addAccount = 1;
	short soap_flag;
	a = (struct __ns1__addAccount *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__addAccount, sizeof(struct __ns1__addAccount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__addAccount(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__addAccount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__addAccount(soap, "ns2:addAccount", &a->ns2__addAccount, "ns2:addAccount"))
				{	soap_flag_ns2__addAccount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__addAccount(struct soap *soap, const struct __ns1__addAccount *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__addAccount(soap, tag?tag:"-ns1:addAccount", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__addAccount * SOAP_FMAC4 soap_get___ns1__addAccount(struct soap *soap, struct __ns1__addAccount *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__addAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteAccount(struct soap *soap, struct __ns1__deleteAccount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__deleteAccount = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteAccount(struct soap *soap, const struct __ns1__deleteAccount *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__deleteAccount(soap, &a->ns2__deleteAccount);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteAccount(struct soap *soap, const char *tag, int id, const struct __ns1__deleteAccount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons2__deleteAccount(soap, "ns2:deleteAccount", -1, &a->ns2__deleteAccount, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteAccount * SOAP_FMAC4 soap_in___ns1__deleteAccount(struct soap *soap, const char *tag, struct __ns1__deleteAccount *a, const char *type)
{
	size_t soap_flag_ns2__deleteAccount = 1;
	short soap_flag;
	a = (struct __ns1__deleteAccount *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__deleteAccount, sizeof(struct __ns1__deleteAccount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__deleteAccount(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__deleteAccount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__deleteAccount(soap, "ns2:deleteAccount", &a->ns2__deleteAccount, "ns2:deleteAccount"))
				{	soap_flag_ns2__deleteAccount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteAccount(struct soap *soap, const struct __ns1__deleteAccount *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__deleteAccount(soap, tag?tag:"-ns1:deleteAccount", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deleteAccount * SOAP_FMAC4 soap_get___ns1__deleteAccount(struct soap *soap, struct __ns1__deleteAccount *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__deleteAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__queryAllAccount(struct soap *soap, struct __ns1__queryAllAccount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__queryAllAccount = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__queryAllAccount(struct soap *soap, const struct __ns1__queryAllAccount *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__queryAllAccount(soap, &a->ns2__queryAllAccount);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__queryAllAccount(struct soap *soap, const char *tag, int id, const struct __ns1__queryAllAccount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons2__queryAllAccount(soap, "ns2:queryAllAccount", -1, &a->ns2__queryAllAccount, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__queryAllAccount * SOAP_FMAC4 soap_in___ns1__queryAllAccount(struct soap *soap, const char *tag, struct __ns1__queryAllAccount *a, const char *type)
{
	size_t soap_flag_ns2__queryAllAccount = 1;
	short soap_flag;
	a = (struct __ns1__queryAllAccount *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__queryAllAccount, sizeof(struct __ns1__queryAllAccount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__queryAllAccount(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__queryAllAccount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__queryAllAccount(soap, "ns2:queryAllAccount", &a->ns2__queryAllAccount, "ns2:queryAllAccount"))
				{	soap_flag_ns2__queryAllAccount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__queryAllAccount(struct soap *soap, const struct __ns1__queryAllAccount *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__queryAllAccount(soap, tag?tag:"-ns1:queryAllAccount", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__queryAllAccount * SOAP_FMAC4 soap_get___ns1__queryAllAccount(struct soap *soap, struct __ns1__queryAllAccount *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__queryAllAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authLogin(struct soap *soap, struct __ns1__authLogin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__authLogin = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authLogin(struct soap *soap, const struct __ns1__authLogin *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__authLogin(soap, &a->ns2__authLogin);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authLogin(struct soap *soap, const char *tag, int id, const struct __ns1__authLogin *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons2__authLogin(soap, "ns2:authLogin", -1, &a->ns2__authLogin, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__authLogin * SOAP_FMAC4 soap_in___ns1__authLogin(struct soap *soap, const char *tag, struct __ns1__authLogin *a, const char *type)
{
	size_t soap_flag_ns2__authLogin = 1;
	short soap_flag;
	a = (struct __ns1__authLogin *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__authLogin, sizeof(struct __ns1__authLogin), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__authLogin(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__authLogin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__authLogin(soap, "ns2:authLogin", &a->ns2__authLogin, "ns2:authLogin"))
				{	soap_flag_ns2__authLogin--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authLogin(struct soap *soap, const struct __ns1__authLogin *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__authLogin(soap, tag?tag:"-ns1:authLogin", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__authLogin * SOAP_FMAC4 soap_get___ns1__authLogin(struct soap *soap, struct __ns1__authLogin *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__authLogin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->ns2__Exception = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__Exception(soap, &a->ns2__Exception);
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_out_PointerTons2__Exception(soap, "ns2:Exception", -1, &a->ns2__Exception, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_ns2__Exception = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__Exception && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__Exception(soap, "ns2:Exception", &a->ns2__Exception, "ns2:Exception"))
				{	soap_flag_ns2__Exception--;
					continue;
				}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_fault > 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__updateLoginPasswordResponse(struct soap *soap, struct ns2__updateLoginPasswordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OperateType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__updateLoginPasswordResponse(struct soap *soap, const struct ns2__updateLoginPasswordResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__OperateType(soap, &a->OperateType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateLoginPasswordResponse(struct soap *soap, const char *tag, int id, const struct ns2__updateLoginPasswordResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__updateLoginPasswordResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__OperateType(soap, "OperateType", -1, &a->OperateType, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__updateLoginPasswordResponse * SOAP_FMAC4 soap_in_ns2__updateLoginPasswordResponse(struct soap *soap, const char *tag, struct ns2__updateLoginPasswordResponse *a, const char *type)
{
	size_t soap_flag_OperateType = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__updateLoginPasswordResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__updateLoginPasswordResponse, sizeof(struct ns2__updateLoginPasswordResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__updateLoginPasswordResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OperateType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__OperateType(soap, "OperateType", &a->OperateType, "ns2:OperateType"))
				{	soap_flag_OperateType--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__updateLoginPasswordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__updateLoginPasswordResponse, 0, sizeof(struct ns2__updateLoginPasswordResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__updateLoginPasswordResponse(struct soap *soap, const struct ns2__updateLoginPasswordResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__updateLoginPasswordResponse);
	if (soap_out_ns2__updateLoginPasswordResponse(soap, tag?tag:"ns2:updateLoginPasswordResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__updateLoginPasswordResponse * SOAP_FMAC4 soap_get_ns2__updateLoginPasswordResponse(struct soap *soap, struct ns2__updateLoginPasswordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__updateLoginPasswordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__updateLoginPassword(struct soap *soap, struct ns2__updateLoginPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->loginName);
	soap_default_string(soap, &a->password);
	soap_default_string(soap, &a->newPassword);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__updateLoginPassword(struct soap *soap, const struct ns2__updateLoginPassword *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->loginName);
	soap_serialize_string(soap, &a->password);
	soap_serialize_string(soap, &a->newPassword);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateLoginPassword(struct soap *soap, const char *tag, int id, const struct ns2__updateLoginPassword *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__updateLoginPassword), type))
		return soap->error;
	if (soap_out_string(soap, "loginName", -1, &a->loginName, ""))
		return soap->error;
	if (soap_out_string(soap, "password", -1, &a->password, ""))
		return soap->error;
	if (soap_out_string(soap, "newPassword", -1, &a->newPassword, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__updateLoginPassword * SOAP_FMAC4 soap_in_ns2__updateLoginPassword(struct soap *soap, const char *tag, struct ns2__updateLoginPassword *a, const char *type)
{
	size_t soap_flag_loginName = 1;
	size_t soap_flag_password = 1;
	size_t soap_flag_newPassword = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__updateLoginPassword *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__updateLoginPassword, sizeof(struct ns2__updateLoginPassword), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__updateLoginPassword(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_loginName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "loginName", &a->loginName, "xsd:string"))
				{	soap_flag_loginName--;
					continue;
				}
			if (soap_flag_password && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "password", &a->password, "xsd:string"))
				{	soap_flag_password--;
					continue;
				}
			if (soap_flag_newPassword && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "newPassword", &a->newPassword, "xsd:string"))
				{	soap_flag_newPassword--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__updateLoginPassword *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__updateLoginPassword, 0, sizeof(struct ns2__updateLoginPassword), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__updateLoginPassword(struct soap *soap, const struct ns2__updateLoginPassword *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__updateLoginPassword);
	if (soap_out_ns2__updateLoginPassword(soap, tag?tag:"ns2:updateLoginPassword", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__updateLoginPassword * SOAP_FMAC4 soap_get_ns2__updateLoginPassword(struct soap *soap, struct ns2__updateLoginPassword *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__updateLoginPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__updateAccountResponse(struct soap *soap, struct ns2__updateAccountResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OperateType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__updateAccountResponse(struct soap *soap, const struct ns2__updateAccountResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__OperateType(soap, &a->OperateType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateAccountResponse(struct soap *soap, const char *tag, int id, const struct ns2__updateAccountResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__updateAccountResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__OperateType(soap, "OperateType", -1, &a->OperateType, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__updateAccountResponse * SOAP_FMAC4 soap_in_ns2__updateAccountResponse(struct soap *soap, const char *tag, struct ns2__updateAccountResponse *a, const char *type)
{
	size_t soap_flag_OperateType = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__updateAccountResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__updateAccountResponse, sizeof(struct ns2__updateAccountResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__updateAccountResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OperateType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__OperateType(soap, "OperateType", &a->OperateType, "ns2:OperateType"))
				{	soap_flag_OperateType--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__updateAccountResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__updateAccountResponse, 0, sizeof(struct ns2__updateAccountResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__updateAccountResponse(struct soap *soap, const struct ns2__updateAccountResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__updateAccountResponse);
	if (soap_out_ns2__updateAccountResponse(soap, tag?tag:"ns2:updateAccountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__updateAccountResponse * SOAP_FMAC4 soap_get_ns2__updateAccountResponse(struct soap *soap, struct ns2__updateAccountResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__updateAccountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__updateAccount(struct soap *soap, struct ns2__updateAccount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->BaiduAccountInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__updateAccount(struct soap *soap, const struct ns2__updateAccount *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__BaiduAccountInfo(soap, &a->BaiduAccountInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateAccount(struct soap *soap, const char *tag, int id, const struct ns2__updateAccount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__updateAccount), type))
		return soap->error;
	if (soap_out_PointerTons2__BaiduAccountInfo(soap, "BaiduAccountInfo", -1, &a->BaiduAccountInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__updateAccount * SOAP_FMAC4 soap_in_ns2__updateAccount(struct soap *soap, const char *tag, struct ns2__updateAccount *a, const char *type)
{
	size_t soap_flag_BaiduAccountInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__updateAccount *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__updateAccount, sizeof(struct ns2__updateAccount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__updateAccount(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_BaiduAccountInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__BaiduAccountInfo(soap, "BaiduAccountInfo", &a->BaiduAccountInfo, "ns2:BaiduAccountInfo"))
				{	soap_flag_BaiduAccountInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__updateAccount *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__updateAccount, 0, sizeof(struct ns2__updateAccount), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__updateAccount(struct soap *soap, const struct ns2__updateAccount *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__updateAccount);
	if (soap_out_ns2__updateAccount(soap, tag?tag:"ns2:updateAccount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__updateAccount * SOAP_FMAC4 soap_get_ns2__updateAccount(struct soap *soap, struct ns2__updateAccount *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__updateAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__OperateType(struct soap *soap, struct ns2__OperateType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->code = NULL;
	a->id = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__OperateType(struct soap *soap, const struct ns2__OperateType *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->code);
	soap_serialize_PointerToLONG64(soap, &a->id);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OperateType(struct soap *soap, const char *tag, int id, const struct ns2__OperateType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__OperateType), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "code", -1, &a->code, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "id", -1, &a->id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__OperateType * SOAP_FMAC4 soap_in_ns2__OperateType(struct soap *soap, const char *tag, struct ns2__OperateType *a, const char *type)
{
	size_t soap_flag_code = 1;
	size_t soap_flag_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__OperateType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__OperateType, sizeof(struct ns2__OperateType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__OperateType(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "code", &a->code, "xsd:int"))
				{	soap_flag_code--;
					continue;
				}
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "id", &a->id, "xsd:long"))
				{	soap_flag_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__OperateType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__OperateType, 0, sizeof(struct ns2__OperateType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__OperateType(struct soap *soap, const struct ns2__OperateType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__OperateType);
	if (soap_out_ns2__OperateType(soap, tag?tag:"ns2:OperateType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__OperateType * SOAP_FMAC4 soap_get_ns2__OperateType(struct soap *soap, struct ns2__OperateType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__OperateType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__addAccountResponse(struct soap *soap, struct ns2__addAccountResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OperateType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__addAccountResponse(struct soap *soap, const struct ns2__addAccountResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__OperateType(soap, &a->OperateType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__addAccountResponse(struct soap *soap, const char *tag, int id, const struct ns2__addAccountResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__addAccountResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__OperateType(soap, "OperateType", -1, &a->OperateType, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__addAccountResponse * SOAP_FMAC4 soap_in_ns2__addAccountResponse(struct soap *soap, const char *tag, struct ns2__addAccountResponse *a, const char *type)
{
	size_t soap_flag_OperateType = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__addAccountResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__addAccountResponse, sizeof(struct ns2__addAccountResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__addAccountResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OperateType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__OperateType(soap, "OperateType", &a->OperateType, "ns2:OperateType"))
				{	soap_flag_OperateType--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__addAccountResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__addAccountResponse, 0, sizeof(struct ns2__addAccountResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__addAccountResponse(struct soap *soap, const struct ns2__addAccountResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__addAccountResponse);
	if (soap_out_ns2__addAccountResponse(soap, tag?tag:"ns2:addAccountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__addAccountResponse * SOAP_FMAC4 soap_get_ns2__addAccountResponse(struct soap *soap, struct ns2__addAccountResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__addAccountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__addAccount(struct soap *soap, struct ns2__addAccount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->BaiduAccountInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__addAccount(struct soap *soap, const struct ns2__addAccount *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__BaiduAccountInfo(soap, &a->BaiduAccountInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__addAccount(struct soap *soap, const char *tag, int id, const struct ns2__addAccount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__addAccount), type))
		return soap->error;
	if (soap_out_PointerTons2__BaiduAccountInfo(soap, "BaiduAccountInfo", -1, &a->BaiduAccountInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__addAccount * SOAP_FMAC4 soap_in_ns2__addAccount(struct soap *soap, const char *tag, struct ns2__addAccount *a, const char *type)
{
	size_t soap_flag_BaiduAccountInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__addAccount *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__addAccount, sizeof(struct ns2__addAccount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__addAccount(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_BaiduAccountInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__BaiduAccountInfo(soap, "BaiduAccountInfo", &a->BaiduAccountInfo, "ns2:BaiduAccountInfo"))
				{	soap_flag_BaiduAccountInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__addAccount *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__addAccount, 0, sizeof(struct ns2__addAccount), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__addAccount(struct soap *soap, const struct ns2__addAccount *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__addAccount);
	if (soap_out_ns2__addAccount(soap, tag?tag:"ns2:addAccount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__addAccount * SOAP_FMAC4 soap_get_ns2__addAccount(struct soap *soap, struct ns2__addAccount *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__addAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__queryAccountResponse(struct soap *soap, struct ns2__queryAccountResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->AccountItemType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__queryAccountResponse(struct soap *soap, const struct ns2__queryAccountResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__AccountItemType(soap, &a->AccountItemType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__queryAccountResponse(struct soap *soap, const char *tag, int id, const struct ns2__queryAccountResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__queryAccountResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__AccountItemType(soap, "AccountItemType", -1, &a->AccountItemType, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__queryAccountResponse * SOAP_FMAC4 soap_in_ns2__queryAccountResponse(struct soap *soap, const char *tag, struct ns2__queryAccountResponse *a, const char *type)
{
	size_t soap_flag_AccountItemType = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__queryAccountResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__queryAccountResponse, sizeof(struct ns2__queryAccountResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__queryAccountResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AccountItemType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__AccountItemType(soap, "AccountItemType", &a->AccountItemType, "ns2:AccountItemType"))
				{	soap_flag_AccountItemType--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__queryAccountResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__queryAccountResponse, 0, sizeof(struct ns2__queryAccountResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__queryAccountResponse(struct soap *soap, const struct ns2__queryAccountResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__queryAccountResponse);
	if (soap_out_ns2__queryAccountResponse(soap, tag?tag:"ns2:queryAccountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__queryAccountResponse * SOAP_FMAC4 soap_get_ns2__queryAccountResponse(struct soap *soap, struct ns2__queryAccountResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__queryAccountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__queryAccount(struct soap *soap, struct ns2__queryAccount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->companyId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__queryAccount(struct soap *soap, const struct ns2__queryAccount *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToLONG64(soap, &a->companyId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__queryAccount(struct soap *soap, const char *tag, int id, const struct ns2__queryAccount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__queryAccount), type))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "companyId", -1, &a->companyId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__queryAccount * SOAP_FMAC4 soap_in_ns2__queryAccount(struct soap *soap, const char *tag, struct ns2__queryAccount *a, const char *type)
{
	size_t soap_flag_companyId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__queryAccount *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__queryAccount, sizeof(struct ns2__queryAccount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__queryAccount(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_companyId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "companyId", &a->companyId, "xsd:long"))
				{	soap_flag_companyId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__queryAccount *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__queryAccount, 0, sizeof(struct ns2__queryAccount), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__queryAccount(struct soap *soap, const struct ns2__queryAccount *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__queryAccount);
	if (soap_out_ns2__queryAccount(soap, tag?tag:"ns2:queryAccount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__queryAccount * SOAP_FMAC4 soap_get_ns2__queryAccount(struct soap *soap, struct ns2__queryAccount *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__queryAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__deleteAccountResponse(struct soap *soap, struct ns2__deleteAccountResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->code);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__deleteAccountResponse(struct soap *soap, const struct ns2__deleteAccountResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->code, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteAccountResponse(struct soap *soap, const char *tag, int id, const struct ns2__deleteAccountResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__deleteAccountResponse), type))
		return soap->error;
	if (soap_out_int(soap, "code", -1, &a->code, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__deleteAccountResponse * SOAP_FMAC4 soap_in_ns2__deleteAccountResponse(struct soap *soap, const char *tag, struct ns2__deleteAccountResponse *a, const char *type)
{
	size_t soap_flag_code = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__deleteAccountResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__deleteAccountResponse, sizeof(struct ns2__deleteAccountResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__deleteAccountResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "code", &a->code, "xsd:int"))
				{	soap_flag_code--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__deleteAccountResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__deleteAccountResponse, 0, sizeof(struct ns2__deleteAccountResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__deleteAccountResponse(struct soap *soap, const struct ns2__deleteAccountResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__deleteAccountResponse);
	if (soap_out_ns2__deleteAccountResponse(soap, tag?tag:"ns2:deleteAccountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__deleteAccountResponse * SOAP_FMAC4 soap_get_ns2__deleteAccountResponse(struct soap *soap, struct ns2__deleteAccountResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__deleteAccountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__deleteAccount(struct soap *soap, struct ns2__deleteAccount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->companyId = NULL;
	a->accountId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__deleteAccount(struct soap *soap, const struct ns2__deleteAccount *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToLONG64(soap, &a->companyId);
	soap_serialize_PointerToLONG64(soap, &a->accountId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteAccount(struct soap *soap, const char *tag, int id, const struct ns2__deleteAccount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__deleteAccount), type))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "companyId", -1, &a->companyId, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "accountId", -1, &a->accountId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__deleteAccount * SOAP_FMAC4 soap_in_ns2__deleteAccount(struct soap *soap, const char *tag, struct ns2__deleteAccount *a, const char *type)
{
	size_t soap_flag_companyId = 1;
	size_t soap_flag_accountId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__deleteAccount *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__deleteAccount, sizeof(struct ns2__deleteAccount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__deleteAccount(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_companyId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "companyId", &a->companyId, "xsd:long"))
				{	soap_flag_companyId--;
					continue;
				}
			if (soap_flag_accountId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "accountId", &a->accountId, "xsd:long"))
				{	soap_flag_accountId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__deleteAccount *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__deleteAccount, 0, sizeof(struct ns2__deleteAccount), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__deleteAccount(struct soap *soap, const struct ns2__deleteAccount *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__deleteAccount);
	if (soap_out_ns2__deleteAccount(soap, tag?tag:"ns2:deleteAccount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__deleteAccount * SOAP_FMAC4 soap_get_ns2__deleteAccount(struct soap *soap, struct ns2__deleteAccount *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__deleteAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__AccountItemType(struct soap *soap, struct ns2__AccountItemType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->code = NULL;
	a->__sizeaccounts = 0;
	a->accounts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__AccountItemType(struct soap *soap, const struct ns2__AccountItemType *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->code);
	if (a->accounts)
	{	int i;
		for (i = 0; i < a->__sizeaccounts; i++)
		{
			soap_embedded(soap, a->accounts + i, SOAP_TYPE_ns2__BaiduAccountInfo);
			soap_serialize_ns2__BaiduAccountInfo(soap, a->accounts + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AccountItemType(struct soap *soap, const char *tag, int id, const struct ns2__AccountItemType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__AccountItemType), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "code", -1, &a->code, ""))
		return soap->error;
	if (a->accounts)
	{	int i;
		for (i = 0; i < a->__sizeaccounts; i++)
			if (soap_out_ns2__BaiduAccountInfo(soap, "accounts", -1, a->accounts + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__AccountItemType * SOAP_FMAC4 soap_in_ns2__AccountItemType(struct soap *soap, const char *tag, struct ns2__AccountItemType *a, const char *type)
{
	size_t soap_flag_code = 1;
	struct soap_blist *soap_blist_accounts = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__AccountItemType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__AccountItemType, sizeof(struct ns2__AccountItemType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__AccountItemType(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "code", &a->code, "xsd:int"))
				{	soap_flag_code--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "accounts", 1, NULL))
			{	if (a->accounts == NULL)
				{	if (soap_blist_accounts == NULL)
						soap_blist_accounts = soap_new_block(soap);
					a->accounts = (struct ns2__BaiduAccountInfo *)soap_push_block(soap, soap_blist_accounts, sizeof(struct ns2__BaiduAccountInfo));
					if (a->accounts == NULL)
						return NULL;
					soap_default_ns2__BaiduAccountInfo(soap, a->accounts);
				}
				soap_revert(soap);
				if (soap_in_ns2__BaiduAccountInfo(soap, "accounts", a->accounts, "ns2:BaiduAccountInfo"))
				{	a->__sizeaccounts++;
					a->accounts = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->accounts)
			soap_pop_block(soap, soap_blist_accounts);
		if (a->__sizeaccounts)
			a->accounts = (struct ns2__BaiduAccountInfo *)soap_save_block(soap, soap_blist_accounts, NULL, 1);
		else
		{	a->accounts = NULL;
			if (soap_blist_accounts)
				soap_end_block(soap, soap_blist_accounts);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__AccountItemType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__AccountItemType, 0, sizeof(struct ns2__AccountItemType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__AccountItemType(struct soap *soap, const struct ns2__AccountItemType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__AccountItemType);
	if (soap_out_ns2__AccountItemType(soap, tag?tag:"ns2:AccountItemType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__AccountItemType * SOAP_FMAC4 soap_get_ns2__AccountItemType(struct soap *soap, struct ns2__AccountItemType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__AccountItemType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__queryAllAccountResponse(struct soap *soap, struct ns2__queryAllAccountResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->AccountItemType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__queryAllAccountResponse(struct soap *soap, const struct ns2__queryAllAccountResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__AccountItemType(soap, &a->AccountItemType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__queryAllAccountResponse(struct soap *soap, const char *tag, int id, const struct ns2__queryAllAccountResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__queryAllAccountResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__AccountItemType(soap, "AccountItemType", -1, &a->AccountItemType, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__queryAllAccountResponse * SOAP_FMAC4 soap_in_ns2__queryAllAccountResponse(struct soap *soap, const char *tag, struct ns2__queryAllAccountResponse *a, const char *type)
{
	size_t soap_flag_AccountItemType = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__queryAllAccountResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__queryAllAccountResponse, sizeof(struct ns2__queryAllAccountResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__queryAllAccountResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AccountItemType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__AccountItemType(soap, "AccountItemType", &a->AccountItemType, "ns2:AccountItemType"))
				{	soap_flag_AccountItemType--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__queryAllAccountResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__queryAllAccountResponse, 0, sizeof(struct ns2__queryAllAccountResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__queryAllAccountResponse(struct soap *soap, const struct ns2__queryAllAccountResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__queryAllAccountResponse);
	if (soap_out_ns2__queryAllAccountResponse(soap, tag?tag:"ns2:queryAllAccountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__queryAllAccountResponse * SOAP_FMAC4 soap_get_ns2__queryAllAccountResponse(struct soap *soap, struct ns2__queryAllAccountResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__queryAllAccountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__queryAllAccount(struct soap *soap, struct ns2__queryAllAccount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__queryAllAccount(struct soap *soap, const struct ns2__queryAllAccount *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__queryAllAccount(struct soap *soap, const char *tag, int id, const struct ns2__queryAllAccount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__queryAllAccount), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__queryAllAccount * SOAP_FMAC4 soap_in_ns2__queryAllAccount(struct soap *soap, const char *tag, struct ns2__queryAllAccount *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__queryAllAccount *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__queryAllAccount, sizeof(struct ns2__queryAllAccount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__queryAllAccount(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__queryAllAccount *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__queryAllAccount, 0, sizeof(struct ns2__queryAllAccount), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__queryAllAccount(struct soap *soap, const struct ns2__queryAllAccount *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__queryAllAccount);
	if (soap_out_ns2__queryAllAccount(soap, tag?tag:"ns2:queryAllAccount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__queryAllAccount * SOAP_FMAC4 soap_get_ns2__queryAllAccount(struct soap *soap, struct ns2__queryAllAccount *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__queryAllAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__CompanyType(struct soap *soap, struct ns2__CompanyType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->code = NULL;
	a->companyId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__CompanyType(struct soap *soap, const struct ns2__CompanyType *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->code);
	soap_serialize_PointerToLONG64(soap, &a->companyId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CompanyType(struct soap *soap, const char *tag, int id, const struct ns2__CompanyType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__CompanyType), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "code", -1, &a->code, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "companyId", -1, &a->companyId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__CompanyType * SOAP_FMAC4 soap_in_ns2__CompanyType(struct soap *soap, const char *tag, struct ns2__CompanyType *a, const char *type)
{
	size_t soap_flag_code = 1;
	size_t soap_flag_companyId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__CompanyType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__CompanyType, sizeof(struct ns2__CompanyType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__CompanyType(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "code", &a->code, "xsd:int"))
				{	soap_flag_code--;
					continue;
				}
			if (soap_flag_companyId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "companyId", &a->companyId, "xsd:long"))
				{	soap_flag_companyId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__CompanyType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__CompanyType, 0, sizeof(struct ns2__CompanyType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__CompanyType(struct soap *soap, const struct ns2__CompanyType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__CompanyType);
	if (soap_out_ns2__CompanyType(soap, tag?tag:"ns2:CompanyType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__CompanyType * SOAP_FMAC4 soap_get_ns2__CompanyType(struct soap *soap, struct ns2__CompanyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__CompanyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__authLoginResponse(struct soap *soap, struct ns2__authLoginResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->CompanyType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__authLoginResponse(struct soap *soap, const struct ns2__authLoginResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__CompanyType(soap, &a->CompanyType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__authLoginResponse(struct soap *soap, const char *tag, int id, const struct ns2__authLoginResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__authLoginResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__CompanyType(soap, "CompanyType", -1, &a->CompanyType, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__authLoginResponse * SOAP_FMAC4 soap_in_ns2__authLoginResponse(struct soap *soap, const char *tag, struct ns2__authLoginResponse *a, const char *type)
{
	size_t soap_flag_CompanyType = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__authLoginResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__authLoginResponse, sizeof(struct ns2__authLoginResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__authLoginResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CompanyType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__CompanyType(soap, "CompanyType", &a->CompanyType, "ns2:CompanyType"))
				{	soap_flag_CompanyType--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__authLoginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__authLoginResponse, 0, sizeof(struct ns2__authLoginResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__authLoginResponse(struct soap *soap, const struct ns2__authLoginResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__authLoginResponse);
	if (soap_out_ns2__authLoginResponse(soap, tag?tag:"ns2:authLoginResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__authLoginResponse * SOAP_FMAC4 soap_get_ns2__authLoginResponse(struct soap *soap, struct ns2__authLoginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__authLoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__authLogin(struct soap *soap, struct ns2__authLogin *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->loginName);
	soap_default_string(soap, &a->password);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__authLogin(struct soap *soap, const struct ns2__authLogin *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->loginName);
	soap_serialize_string(soap, &a->password);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__authLogin(struct soap *soap, const char *tag, int id, const struct ns2__authLogin *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__authLogin), type))
		return soap->error;
	if (soap_out_string(soap, "loginName", -1, &a->loginName, ""))
		return soap->error;
	if (soap_out_string(soap, "password", -1, &a->password, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__authLogin * SOAP_FMAC4 soap_in_ns2__authLogin(struct soap *soap, const char *tag, struct ns2__authLogin *a, const char *type)
{
	size_t soap_flag_loginName = 1;
	size_t soap_flag_password = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__authLogin *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__authLogin, sizeof(struct ns2__authLogin), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__authLogin(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_loginName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "loginName", &a->loginName, "xsd:string"))
				{	soap_flag_loginName--;
					continue;
				}
			if (soap_flag_password && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "password", &a->password, "xsd:string"))
				{	soap_flag_password--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__authLogin *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__authLogin, 0, sizeof(struct ns2__authLogin), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__authLogin(struct soap *soap, const struct ns2__authLogin *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__authLogin);
	if (soap_out_ns2__authLogin(soap, tag?tag:"ns2:authLogin", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__authLogin * SOAP_FMAC4 soap_get_ns2__authLogin(struct soap *soap, struct ns2__authLogin *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__authLogin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Exception(struct soap *soap, struct ns2__Exception *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->message);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Exception(struct soap *soap, const struct ns2__Exception *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->message);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Exception(struct soap *soap, const char *tag, int id, const struct ns2__Exception *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Exception), type))
		return soap->error;
	if (soap_out_string(soap, "message", -1, &a->message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__Exception * SOAP_FMAC4 soap_in_ns2__Exception(struct soap *soap, const char *tag, struct ns2__Exception *a, const char *type)
{
	size_t soap_flag_message = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__Exception *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Exception, sizeof(struct ns2__Exception), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__Exception(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__Exception *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Exception, 0, sizeof(struct ns2__Exception), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Exception(struct soap *soap, const struct ns2__Exception *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__Exception);
	if (soap_out_ns2__Exception(soap, tag?tag:"ns2:Exception", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__Exception * SOAP_FMAC4 soap_get_ns2__Exception(struct soap *soap, struct ns2__Exception *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Exception(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__BaiduAccountInfo(struct soap *soap, struct ns2__BaiduAccountInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->accountId = NULL;
	soap_default_string(soap, &a->accountName);
	soap_default_string(soap, &a->password);
	soap_default_string(soap, &a->domain);
	soap_default_string(soap, &a->apiToken);
	soap_default_string(soap, &a->websiteName);
	soap_default_string(soap, &a->compName);
	soap_default_string(soap, &a->pcContact);
	soap_default_string(soap, &a->pcTelephone);
	a->status = NULL;
	a->companyId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__BaiduAccountInfo(struct soap *soap, const struct ns2__BaiduAccountInfo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToLONG64(soap, &a->accountId);
	soap_serialize_string(soap, &a->accountName);
	soap_serialize_string(soap, &a->password);
	soap_serialize_string(soap, &a->domain);
	soap_serialize_string(soap, &a->apiToken);
	soap_serialize_string(soap, &a->websiteName);
	soap_serialize_string(soap, &a->compName);
	soap_serialize_string(soap, &a->pcContact);
	soap_serialize_string(soap, &a->pcTelephone);
	soap_serialize_PointerToint(soap, &a->status);
	soap_serialize_PointerToLONG64(soap, &a->companyId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BaiduAccountInfo(struct soap *soap, const char *tag, int id, const struct ns2__BaiduAccountInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__BaiduAccountInfo), type))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "accountId", -1, &a->accountId, ""))
		return soap->error;
	if (soap_out_string(soap, "accountName", -1, &a->accountName, ""))
		return soap->error;
	if (soap_out_string(soap, "password", -1, &a->password, ""))
		return soap->error;
	if (soap_out_string(soap, "domain", -1, &a->domain, ""))
		return soap->error;
	if (soap_out_string(soap, "apiToken", -1, &a->apiToken, ""))
		return soap->error;
	if (soap_out_string(soap, "websiteName", -1, &a->websiteName, ""))
		return soap->error;
	if (soap_out_string(soap, "compName", -1, &a->compName, ""))
		return soap->error;
	if (soap_out_string(soap, "pcContact", -1, &a->pcContact, ""))
		return soap->error;
	if (soap_out_string(soap, "pcTelephone", -1, &a->pcTelephone, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "status", -1, &a->status, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "companyId", -1, &a->companyId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__BaiduAccountInfo * SOAP_FMAC4 soap_in_ns2__BaiduAccountInfo(struct soap *soap, const char *tag, struct ns2__BaiduAccountInfo *a, const char *type)
{
	size_t soap_flag_accountId = 1;
	size_t soap_flag_accountName = 1;
	size_t soap_flag_password = 1;
	size_t soap_flag_domain = 1;
	size_t soap_flag_apiToken = 1;
	size_t soap_flag_websiteName = 1;
	size_t soap_flag_compName = 1;
	size_t soap_flag_pcContact = 1;
	size_t soap_flag_pcTelephone = 1;
	size_t soap_flag_status = 1;
	size_t soap_flag_companyId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__BaiduAccountInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__BaiduAccountInfo, sizeof(struct ns2__BaiduAccountInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__BaiduAccountInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_accountId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "accountId", &a->accountId, "xsd:long"))
				{	soap_flag_accountId--;
					continue;
				}
			if (soap_flag_accountName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "accountName", &a->accountName, "xsd:string"))
				{	soap_flag_accountName--;
					continue;
				}
			if (soap_flag_password && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "password", &a->password, "xsd:string"))
				{	soap_flag_password--;
					continue;
				}
			if (soap_flag_domain && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "domain", &a->domain, "xsd:string"))
				{	soap_flag_domain--;
					continue;
				}
			if (soap_flag_apiToken && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "apiToken", &a->apiToken, "xsd:string"))
				{	soap_flag_apiToken--;
					continue;
				}
			if (soap_flag_websiteName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "websiteName", &a->websiteName, "xsd:string"))
				{	soap_flag_websiteName--;
					continue;
				}
			if (soap_flag_compName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "compName", &a->compName, "xsd:string"))
				{	soap_flag_compName--;
					continue;
				}
			if (soap_flag_pcContact && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "pcContact", &a->pcContact, "xsd:string"))
				{	soap_flag_pcContact--;
					continue;
				}
			if (soap_flag_pcTelephone && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "pcTelephone", &a->pcTelephone, "xsd:string"))
				{	soap_flag_pcTelephone--;
					continue;
				}
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "status", &a->status, "xsd:int"))
				{	soap_flag_status--;
					continue;
				}
			if (soap_flag_companyId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "companyId", &a->companyId, "xsd:long"))
				{	soap_flag_companyId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__BaiduAccountInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__BaiduAccountInfo, 0, sizeof(struct ns2__BaiduAccountInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__BaiduAccountInfo(struct soap *soap, const struct ns2__BaiduAccountInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__BaiduAccountInfo);
	if (soap_out_ns2__BaiduAccountInfo(soap, tag?tag:"ns2:BaiduAccountInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__BaiduAccountInfo * SOAP_FMAC4 soap_get_ns2__BaiduAccountInfo(struct soap *soap, struct ns2__BaiduAccountInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__BaiduAccountInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__commonResult(struct soap *soap, struct ns2__commonResult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->code = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__commonResult(struct soap *soap, const struct ns2__commonResult *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->code);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__commonResult(struct soap *soap, const char *tag, int id, const struct ns2__commonResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__commonResult), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "code", -1, &a->code, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__commonResult * SOAP_FMAC4 soap_in_ns2__commonResult(struct soap *soap, const char *tag, struct ns2__commonResult *a, const char *type)
{
	size_t soap_flag_code = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__commonResult *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__commonResult, sizeof(struct ns2__commonResult), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__commonResult(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "code", &a->code, "xsd:int"))
				{	soap_flag_code--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__commonResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__commonResult, 0, sizeof(struct ns2__commonResult), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__commonResult(struct soap *soap, const struct ns2__commonResult *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__commonResult);
	if (soap_out_ns2__commonResult(soap, tag?tag:"ns2:commonResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__commonResult * SOAP_FMAC4 soap_get_ns2__commonResult(struct soap *soap, struct ns2__commonResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__commonResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__updateLoginPasswordResponse(struct soap *soap, struct ns2__updateLoginPasswordResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__updateLoginPasswordResponse))
		soap_serialize_ns2__updateLoginPasswordResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__updateLoginPasswordResponse(struct soap *soap, const char *tag, int id, struct ns2__updateLoginPasswordResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__updateLoginPasswordResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__updateLoginPasswordResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__updateLoginPasswordResponse ** SOAP_FMAC4 soap_in_PointerTons2__updateLoginPasswordResponse(struct soap *soap, const char *tag, struct ns2__updateLoginPasswordResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__updateLoginPasswordResponse **)soap_malloc(soap, sizeof(struct ns2__updateLoginPasswordResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__updateLoginPasswordResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__updateLoginPasswordResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__updateLoginPasswordResponse, sizeof(struct ns2__updateLoginPasswordResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__updateLoginPasswordResponse(struct soap *soap, struct ns2__updateLoginPasswordResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__updateLoginPasswordResponse);
	if (soap_out_PointerTons2__updateLoginPasswordResponse(soap, tag?tag:"ns2:updateLoginPasswordResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__updateLoginPasswordResponse ** SOAP_FMAC4 soap_get_PointerTons2__updateLoginPasswordResponse(struct soap *soap, struct ns2__updateLoginPasswordResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__updateLoginPasswordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__updateLoginPassword(struct soap *soap, struct ns2__updateLoginPassword *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__updateLoginPassword))
		soap_serialize_ns2__updateLoginPassword(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__updateLoginPassword(struct soap *soap, const char *tag, int id, struct ns2__updateLoginPassword *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__updateLoginPassword);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__updateLoginPassword(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__updateLoginPassword ** SOAP_FMAC4 soap_in_PointerTons2__updateLoginPassword(struct soap *soap, const char *tag, struct ns2__updateLoginPassword **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__updateLoginPassword **)soap_malloc(soap, sizeof(struct ns2__updateLoginPassword *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__updateLoginPassword(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__updateLoginPassword **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__updateLoginPassword, sizeof(struct ns2__updateLoginPassword), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__updateLoginPassword(struct soap *soap, struct ns2__updateLoginPassword *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__updateLoginPassword);
	if (soap_out_PointerTons2__updateLoginPassword(soap, tag?tag:"ns2:updateLoginPassword", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__updateLoginPassword ** SOAP_FMAC4 soap_get_PointerTons2__updateLoginPassword(struct soap *soap, struct ns2__updateLoginPassword **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__updateLoginPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__updateAccountResponse(struct soap *soap, struct ns2__updateAccountResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__updateAccountResponse))
		soap_serialize_ns2__updateAccountResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__updateAccountResponse(struct soap *soap, const char *tag, int id, struct ns2__updateAccountResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__updateAccountResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__updateAccountResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__updateAccountResponse ** SOAP_FMAC4 soap_in_PointerTons2__updateAccountResponse(struct soap *soap, const char *tag, struct ns2__updateAccountResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__updateAccountResponse **)soap_malloc(soap, sizeof(struct ns2__updateAccountResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__updateAccountResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__updateAccountResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__updateAccountResponse, sizeof(struct ns2__updateAccountResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__updateAccountResponse(struct soap *soap, struct ns2__updateAccountResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__updateAccountResponse);
	if (soap_out_PointerTons2__updateAccountResponse(soap, tag?tag:"ns2:updateAccountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__updateAccountResponse ** SOAP_FMAC4 soap_get_PointerTons2__updateAccountResponse(struct soap *soap, struct ns2__updateAccountResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__updateAccountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__updateAccount(struct soap *soap, struct ns2__updateAccount *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__updateAccount))
		soap_serialize_ns2__updateAccount(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__updateAccount(struct soap *soap, const char *tag, int id, struct ns2__updateAccount *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__updateAccount);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__updateAccount(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__updateAccount ** SOAP_FMAC4 soap_in_PointerTons2__updateAccount(struct soap *soap, const char *tag, struct ns2__updateAccount **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__updateAccount **)soap_malloc(soap, sizeof(struct ns2__updateAccount *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__updateAccount(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__updateAccount **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__updateAccount, sizeof(struct ns2__updateAccount), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__updateAccount(struct soap *soap, struct ns2__updateAccount *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__updateAccount);
	if (soap_out_PointerTons2__updateAccount(soap, tag?tag:"ns2:updateAccount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__updateAccount ** SOAP_FMAC4 soap_get_PointerTons2__updateAccount(struct soap *soap, struct ns2__updateAccount **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__updateAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__queryAccountResponse(struct soap *soap, struct ns2__queryAccountResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__queryAccountResponse))
		soap_serialize_ns2__queryAccountResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__queryAccountResponse(struct soap *soap, const char *tag, int id, struct ns2__queryAccountResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__queryAccountResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__queryAccountResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__queryAccountResponse ** SOAP_FMAC4 soap_in_PointerTons2__queryAccountResponse(struct soap *soap, const char *tag, struct ns2__queryAccountResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__queryAccountResponse **)soap_malloc(soap, sizeof(struct ns2__queryAccountResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__queryAccountResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__queryAccountResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__queryAccountResponse, sizeof(struct ns2__queryAccountResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__queryAccountResponse(struct soap *soap, struct ns2__queryAccountResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__queryAccountResponse);
	if (soap_out_PointerTons2__queryAccountResponse(soap, tag?tag:"ns2:queryAccountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__queryAccountResponse ** SOAP_FMAC4 soap_get_PointerTons2__queryAccountResponse(struct soap *soap, struct ns2__queryAccountResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__queryAccountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__queryAccount(struct soap *soap, struct ns2__queryAccount *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__queryAccount))
		soap_serialize_ns2__queryAccount(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__queryAccount(struct soap *soap, const char *tag, int id, struct ns2__queryAccount *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__queryAccount);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__queryAccount(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__queryAccount ** SOAP_FMAC4 soap_in_PointerTons2__queryAccount(struct soap *soap, const char *tag, struct ns2__queryAccount **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__queryAccount **)soap_malloc(soap, sizeof(struct ns2__queryAccount *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__queryAccount(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__queryAccount **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__queryAccount, sizeof(struct ns2__queryAccount), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__queryAccount(struct soap *soap, struct ns2__queryAccount *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__queryAccount);
	if (soap_out_PointerTons2__queryAccount(soap, tag?tag:"ns2:queryAccount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__queryAccount ** SOAP_FMAC4 soap_get_PointerTons2__queryAccount(struct soap *soap, struct ns2__queryAccount **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__queryAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__addAccountResponse(struct soap *soap, struct ns2__addAccountResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__addAccountResponse))
		soap_serialize_ns2__addAccountResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__addAccountResponse(struct soap *soap, const char *tag, int id, struct ns2__addAccountResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__addAccountResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__addAccountResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__addAccountResponse ** SOAP_FMAC4 soap_in_PointerTons2__addAccountResponse(struct soap *soap, const char *tag, struct ns2__addAccountResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__addAccountResponse **)soap_malloc(soap, sizeof(struct ns2__addAccountResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__addAccountResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__addAccountResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__addAccountResponse, sizeof(struct ns2__addAccountResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__addAccountResponse(struct soap *soap, struct ns2__addAccountResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__addAccountResponse);
	if (soap_out_PointerTons2__addAccountResponse(soap, tag?tag:"ns2:addAccountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__addAccountResponse ** SOAP_FMAC4 soap_get_PointerTons2__addAccountResponse(struct soap *soap, struct ns2__addAccountResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__addAccountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__addAccount(struct soap *soap, struct ns2__addAccount *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__addAccount))
		soap_serialize_ns2__addAccount(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__addAccount(struct soap *soap, const char *tag, int id, struct ns2__addAccount *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__addAccount);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__addAccount(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__addAccount ** SOAP_FMAC4 soap_in_PointerTons2__addAccount(struct soap *soap, const char *tag, struct ns2__addAccount **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__addAccount **)soap_malloc(soap, sizeof(struct ns2__addAccount *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__addAccount(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__addAccount **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__addAccount, sizeof(struct ns2__addAccount), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__addAccount(struct soap *soap, struct ns2__addAccount *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__addAccount);
	if (soap_out_PointerTons2__addAccount(soap, tag?tag:"ns2:addAccount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__addAccount ** SOAP_FMAC4 soap_get_PointerTons2__addAccount(struct soap *soap, struct ns2__addAccount **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__addAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__deleteAccountResponse(struct soap *soap, struct ns2__deleteAccountResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__deleteAccountResponse))
		soap_serialize_ns2__deleteAccountResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__deleteAccountResponse(struct soap *soap, const char *tag, int id, struct ns2__deleteAccountResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__deleteAccountResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__deleteAccountResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__deleteAccountResponse ** SOAP_FMAC4 soap_in_PointerTons2__deleteAccountResponse(struct soap *soap, const char *tag, struct ns2__deleteAccountResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__deleteAccountResponse **)soap_malloc(soap, sizeof(struct ns2__deleteAccountResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__deleteAccountResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__deleteAccountResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__deleteAccountResponse, sizeof(struct ns2__deleteAccountResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__deleteAccountResponse(struct soap *soap, struct ns2__deleteAccountResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__deleteAccountResponse);
	if (soap_out_PointerTons2__deleteAccountResponse(soap, tag?tag:"ns2:deleteAccountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__deleteAccountResponse ** SOAP_FMAC4 soap_get_PointerTons2__deleteAccountResponse(struct soap *soap, struct ns2__deleteAccountResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__deleteAccountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__deleteAccount(struct soap *soap, struct ns2__deleteAccount *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__deleteAccount))
		soap_serialize_ns2__deleteAccount(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__deleteAccount(struct soap *soap, const char *tag, int id, struct ns2__deleteAccount *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__deleteAccount);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__deleteAccount(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__deleteAccount ** SOAP_FMAC4 soap_in_PointerTons2__deleteAccount(struct soap *soap, const char *tag, struct ns2__deleteAccount **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__deleteAccount **)soap_malloc(soap, sizeof(struct ns2__deleteAccount *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__deleteAccount(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__deleteAccount **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__deleteAccount, sizeof(struct ns2__deleteAccount), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__deleteAccount(struct soap *soap, struct ns2__deleteAccount *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__deleteAccount);
	if (soap_out_PointerTons2__deleteAccount(soap, tag?tag:"ns2:deleteAccount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__deleteAccount ** SOAP_FMAC4 soap_get_PointerTons2__deleteAccount(struct soap *soap, struct ns2__deleteAccount **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__deleteAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__queryAllAccountResponse(struct soap *soap, struct ns2__queryAllAccountResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__queryAllAccountResponse))
		soap_serialize_ns2__queryAllAccountResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__queryAllAccountResponse(struct soap *soap, const char *tag, int id, struct ns2__queryAllAccountResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__queryAllAccountResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__queryAllAccountResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__queryAllAccountResponse ** SOAP_FMAC4 soap_in_PointerTons2__queryAllAccountResponse(struct soap *soap, const char *tag, struct ns2__queryAllAccountResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__queryAllAccountResponse **)soap_malloc(soap, sizeof(struct ns2__queryAllAccountResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__queryAllAccountResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__queryAllAccountResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__queryAllAccountResponse, sizeof(struct ns2__queryAllAccountResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__queryAllAccountResponse(struct soap *soap, struct ns2__queryAllAccountResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__queryAllAccountResponse);
	if (soap_out_PointerTons2__queryAllAccountResponse(soap, tag?tag:"ns2:queryAllAccountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__queryAllAccountResponse ** SOAP_FMAC4 soap_get_PointerTons2__queryAllAccountResponse(struct soap *soap, struct ns2__queryAllAccountResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__queryAllAccountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__queryAllAccount(struct soap *soap, struct ns2__queryAllAccount *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__queryAllAccount))
		soap_serialize_ns2__queryAllAccount(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__queryAllAccount(struct soap *soap, const char *tag, int id, struct ns2__queryAllAccount *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__queryAllAccount);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__queryAllAccount(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__queryAllAccount ** SOAP_FMAC4 soap_in_PointerTons2__queryAllAccount(struct soap *soap, const char *tag, struct ns2__queryAllAccount **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__queryAllAccount **)soap_malloc(soap, sizeof(struct ns2__queryAllAccount *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__queryAllAccount(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__queryAllAccount **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__queryAllAccount, sizeof(struct ns2__queryAllAccount), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__queryAllAccount(struct soap *soap, struct ns2__queryAllAccount *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__queryAllAccount);
	if (soap_out_PointerTons2__queryAllAccount(soap, tag?tag:"ns2:queryAllAccount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__queryAllAccount ** SOAP_FMAC4 soap_get_PointerTons2__queryAllAccount(struct soap *soap, struct ns2__queryAllAccount **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__queryAllAccount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__authLoginResponse(struct soap *soap, struct ns2__authLoginResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__authLoginResponse))
		soap_serialize_ns2__authLoginResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__authLoginResponse(struct soap *soap, const char *tag, int id, struct ns2__authLoginResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__authLoginResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__authLoginResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__authLoginResponse ** SOAP_FMAC4 soap_in_PointerTons2__authLoginResponse(struct soap *soap, const char *tag, struct ns2__authLoginResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__authLoginResponse **)soap_malloc(soap, sizeof(struct ns2__authLoginResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__authLoginResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__authLoginResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__authLoginResponse, sizeof(struct ns2__authLoginResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__authLoginResponse(struct soap *soap, struct ns2__authLoginResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__authLoginResponse);
	if (soap_out_PointerTons2__authLoginResponse(soap, tag?tag:"ns2:authLoginResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__authLoginResponse ** SOAP_FMAC4 soap_get_PointerTons2__authLoginResponse(struct soap *soap, struct ns2__authLoginResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__authLoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__authLogin(struct soap *soap, struct ns2__authLogin *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__authLogin))
		soap_serialize_ns2__authLogin(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__authLogin(struct soap *soap, const char *tag, int id, struct ns2__authLogin *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__authLogin);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__authLogin(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__authLogin ** SOAP_FMAC4 soap_in_PointerTons2__authLogin(struct soap *soap, const char *tag, struct ns2__authLogin **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__authLogin **)soap_malloc(soap, sizeof(struct ns2__authLogin *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__authLogin(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__authLogin **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__authLogin, sizeof(struct ns2__authLogin), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__authLogin(struct soap *soap, struct ns2__authLogin *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__authLogin);
	if (soap_out_PointerTons2__authLogin(soap, tag?tag:"ns2:authLogin", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__authLogin ** SOAP_FMAC4 soap_get_PointerTons2__authLogin(struct soap *soap, struct ns2__authLogin **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__authLogin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Exception(struct soap *soap, struct ns2__Exception *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__Exception))
		soap_serialize_ns2__Exception(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Exception(struct soap *soap, const char *tag, int id, struct ns2__Exception *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__Exception);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__Exception(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__Exception ** SOAP_FMAC4 soap_in_PointerTons2__Exception(struct soap *soap, const char *tag, struct ns2__Exception **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__Exception **)soap_malloc(soap, sizeof(struct ns2__Exception *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__Exception(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__Exception **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__Exception, sizeof(struct ns2__Exception), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Exception(struct soap *soap, struct ns2__Exception *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__Exception);
	if (soap_out_PointerTons2__Exception(soap, tag?tag:"ns2:Exception", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__Exception ** SOAP_FMAC4 soap_get_PointerTons2__Exception(struct soap *soap, struct ns2__Exception **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__Exception(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OperateType(struct soap *soap, struct ns2__OperateType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__OperateType))
		soap_serialize_ns2__OperateType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OperateType(struct soap *soap, const char *tag, int id, struct ns2__OperateType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__OperateType);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__OperateType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__OperateType ** SOAP_FMAC4 soap_in_PointerTons2__OperateType(struct soap *soap, const char *tag, struct ns2__OperateType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__OperateType **)soap_malloc(soap, sizeof(struct ns2__OperateType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__OperateType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__OperateType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__OperateType, sizeof(struct ns2__OperateType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OperateType(struct soap *soap, struct ns2__OperateType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__OperateType);
	if (soap_out_PointerTons2__OperateType(soap, tag?tag:"ns2:OperateType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__OperateType ** SOAP_FMAC4 soap_get_PointerTons2__OperateType(struct soap *soap, struct ns2__OperateType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__OperateType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BaiduAccountInfo(struct soap *soap, struct ns2__BaiduAccountInfo *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__BaiduAccountInfo))
		soap_serialize_ns2__BaiduAccountInfo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BaiduAccountInfo(struct soap *soap, const char *tag, int id, struct ns2__BaiduAccountInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__BaiduAccountInfo);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__BaiduAccountInfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__BaiduAccountInfo ** SOAP_FMAC4 soap_in_PointerTons2__BaiduAccountInfo(struct soap *soap, const char *tag, struct ns2__BaiduAccountInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__BaiduAccountInfo **)soap_malloc(soap, sizeof(struct ns2__BaiduAccountInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__BaiduAccountInfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__BaiduAccountInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__BaiduAccountInfo, sizeof(struct ns2__BaiduAccountInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BaiduAccountInfo(struct soap *soap, struct ns2__BaiduAccountInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__BaiduAccountInfo);
	if (soap_out_PointerTons2__BaiduAccountInfo(soap, tag?tag:"ns2:BaiduAccountInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__BaiduAccountInfo ** SOAP_FMAC4 soap_get_PointerTons2__BaiduAccountInfo(struct soap *soap, struct ns2__BaiduAccountInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__BaiduAccountInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AccountItemType(struct soap *soap, struct ns2__AccountItemType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__AccountItemType))
		soap_serialize_ns2__AccountItemType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AccountItemType(struct soap *soap, const char *tag, int id, struct ns2__AccountItemType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__AccountItemType);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__AccountItemType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__AccountItemType ** SOAP_FMAC4 soap_in_PointerTons2__AccountItemType(struct soap *soap, const char *tag, struct ns2__AccountItemType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__AccountItemType **)soap_malloc(soap, sizeof(struct ns2__AccountItemType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__AccountItemType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__AccountItemType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__AccountItemType, sizeof(struct ns2__AccountItemType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AccountItemType(struct soap *soap, struct ns2__AccountItemType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__AccountItemType);
	if (soap_out_PointerTons2__AccountItemType(soap, tag?tag:"ns2:AccountItemType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__AccountItemType ** SOAP_FMAC4 soap_get_PointerTons2__AccountItemType(struct soap *soap, struct ns2__AccountItemType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__AccountItemType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CompanyType(struct soap *soap, struct ns2__CompanyType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__CompanyType))
		soap_serialize_ns2__CompanyType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CompanyType(struct soap *soap, const char *tag, int id, struct ns2__CompanyType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__CompanyType);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__CompanyType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__CompanyType ** SOAP_FMAC4 soap_in_PointerTons2__CompanyType(struct soap *soap, const char *tag, struct ns2__CompanyType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__CompanyType **)soap_malloc(soap, sizeof(struct ns2__CompanyType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__CompanyType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__CompanyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__CompanyType, sizeof(struct ns2__CompanyType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CompanyType(struct soap *soap, struct ns2__CompanyType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__CompanyType);
	if (soap_out_PointerTons2__CompanyType(soap, tag?tag:"ns2:CompanyType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__CompanyType ** SOAP_FMAC4 soap_get_PointerTons2__CompanyType(struct soap *soap, struct ns2__CompanyType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__CompanyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap *soap, LONG64 *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_LONG64);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap *soap, const char *tag, int id, LONG64 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_LONG64);
	if (id < 0)
		return soap->error;
	return soap_out_LONG64(soap, tag, id, *a, type);
}

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap *soap, const char *tag, LONG64 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (LONG64 **)soap_malloc(soap, sizeof(LONG64 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_LONG64(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (LONG64 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_LONG64, sizeof(LONG64), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap *soap, LONG64 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToLONG64);
	if (soap_out_PointerToLONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap *soap, LONG64 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifdef __cplusplus
}
#endif

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.c */
